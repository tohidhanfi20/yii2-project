- hosts: web
  become: yes
  vars:
    docker_user: ubuntu
    app_version: "{{ lookup('env', 'APP_VERSION') | default('latest', true) }}"
    previous_version: "{{ lookup('env', 'PREVIOUS_VERSION') | default('') }}"
    deploy_success_file: "/tmp/deploy_success"

  tasks:
    # System Setup
    - name: Install required packages
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
          - git
          - nginx
        state: present
        update_cache: yes

    # Docker Installation
    - name: Install Docker
      shell: |
        curl -fsSL https://get.docker.com -o get-docker.sh
        sh get-docker.sh
      args:
        creates: /usr/bin/docker

    - name: Install Docker Compose
      shell: |
        LATEST_RELEASE=1.29.2
        DEST=/usr/local/bin/docker-compose
        curl -L "https://github.com/docker/compose/releases/download/${LATEST_RELEASE}/docker-compose-$(uname -s)-$(uname -m)" -o $DEST
        chmod +x $DEST
      args:
        creates: /usr/local/bin/docker-compose

    - name: Add user to docker group
      user:
        name: "{{ docker_user }}"
        groups: docker
        append: yes

    - name: Enable and start Docker
      systemd:
        name: docker
        enabled: yes
        state: started

    # Docker Swarm Setup
    - name: Initialize Docker Swarm
      shell: docker swarm init
      ignore_errors: yes

    # NGINX Configuration Tasks
    - name: Remove default nginx site
      file:
        path: /etc/nginx/sites-enabled/default
        state: absent

    - name: Generate NGINX site configuration
      template:
        src: ../nginx/yii2.conf.j2
        dest: /etc/nginx/sites-available/yii2.conf
      vars:
        server_ip: "{{ ansible_host }}"

    - name: Enable NGINX site
      file:
        src: /etc/nginx/sites-available/yii2.conf
        dest: /etc/nginx/sites-enabled/yii2.conf
        state: link
        force: yes

    - name: Restart NGINX
      service:
        name: nginx
        state: restarted

    # Docker Networks
    - name: Ensure Docker Swarm overlay network 'appnet' exists
      shell: docker network create --driver overlay appnet
      register: create_network
      failed_when: create_network.rc != 0 and 'already exists' not in create_network.stderr
      changed_when: "'already exists' not in create_network.stderr"

    - name: Create monitoring network
      docker_network:
        name: monitoring
        driver: bridge
        state: present

    # Application Deployment
    - name: Check if service exists
      command: docker service ls --filter name=yii2-app -q
      register: service_check
      changed_when: false
      ignore_errors: yes

    - name: Get current service version
      shell: docker service inspect --format '{{ '{{' }} index .Spec.TaskTemplate.ContainerSpec.Image {{ '}}' }}' yii2-app || echo ""
      register: current_version
      when: service_check.stdout != ""
      ignore_errors: yes

    - name: Log into Docker Hub
      docker_login:
        registry: docker.io
        username: "{{ docker_registry_username }}"
        password: "{{ docker_registry_password }}"
      no_log: true

    - name: Create Docker service if it doesn't exist
      command: >
        docker service create 
        --name yii2-app 
        --network appnet 
        --publish 9000:9000
        --replicas 2
        --health-cmd "pidof php-fpm || exit 1"
        --health-interval 30s
        --health-timeout 10s
        --health-retries 3
        --update-delay 30s
        --update-parallelism 1
        tohidazure/yii2-app:{{ app_version }}
      when: service_check.stdout == ""

    - name: Update Docker service if it exists
      command: >
        docker service update 
        --image tohidazure/yii2-app:{{ app_version }}
        --replicas 1
        --publish-add 9000:9000
        yii2-app
      when: service_check.stdout != ""

    # Monitoring Setup - Node Exporter
    - name: Deploy Node Exporter
      docker_container:
        name: node-exporter
        image: quay.io/prometheus/node-exporter:latest
        state: started
        restart_policy: always
        network_mode: host
        pid_mode: host
        volumes:
          - /proc:/host/proc:ro
          - /sys:/host/sys:ro
          - /:/rootfs:ro
        command:
          - '--path.procfs=/host/proc'
          - '--path.sysfs=/host/sys'
          - '--path.rootfs=/rootfs'
          - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'

    # Prometheus Setup
    - name: Create Prometheus config directory
      file:
        path: /etc/prometheus
        state: directory
        mode: '0755'

    - name: Ensure Prometheus data directory exists and has correct permissions
      file:
        path: /var/lib/prometheus
        state: directory
        owner: 65534
        group: 65534
        mode: '0775'
        recurse: yes

    - name: Create Prometheus configuration
      copy:
        content: |
          global:
            scrape_interval: 15s
            evaluation_interval: 15s

          scrape_configs:
            - job_name: 'node_exporter'
              static_configs:
                - targets: ['localhost:9100']
        dest: /etc/prometheus/prometheus.yml
        mode: '0644'

    - name: Deploy Prometheus
      docker_container:
        name: prometheus
        image: prom/prometheus:latest
        state: started
        restart_policy: always
        ports:
          - "9090:9090"
        volumes:
          - /etc/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
          - /var/lib/prometheus:/prometheus
        command:
          - '--config.file=/etc/prometheus/prometheus.yml'
          - '--storage.tsdb.path=/prometheus'
          - '--web.console.libraries=/usr/share/prometheus/console_libraries'
          - '--web.console.templates=/usr/share/prometheus/consoles'
        network_mode: host

    # Grafana Setup
    - name: Deploy Grafana
      docker_container:
        name: grafana
        image: grafana/grafana:latest
        state: started
        restart_policy: always
        ports:
          - "3000:3000"
        volumes:
          - grafana-storage:/var/lib/grafana
        networks:
          - name: monitoring
        env:
          GF_SECURITY_ADMIN_PASSWORD: "{{ lookup('env', 'GRAFANA_ADMIN_PASSWORD') | default('admin', true) }}"
          
    - name: Display deployment status
      debug:
        msg: "Deployment Status: Success"
    
    - name: Clean up old Docker images
      shell: docker image prune -af
