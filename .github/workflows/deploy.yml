name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Generate version tag
      id: version
      run: |
        echo "VERSION=$(date +%Y%m%d-%H%M%S)" >> $GITHUB_ENV

    - name: Get previous version
      id: prev_version
      run: |
        PREV_VERSION=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/deployments?environment=production&status=success" \
          | jq -r '.[0].ref' || echo "latest")
        echo "PREVIOUS_VERSION=$PREV_VERSION" >> $GITHUB_ENV

    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        tags: |
          tohidazure/yii2-app:latest
          tohidazure/yii2-app:${{ env.VERSION }}

    - name: Install SSH key
      uses: webfactory/ssh-agent@v0.5.4
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Add host key to known_hosts
      run: ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

    - name: Install Ansible
      run: |
        sudo apt update
        sudo apt install -y ansible

    - name: Create deployment directory on remote host
      run: |
        ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} 'mkdir -p ~/deployment'

    - name: Run Ansible playbook from runner
      env:
        ANSIBLE_HOST_KEY_CHECKING: false
        APP_VERSION: ${{ env.VERSION }}
        PREVIOUS_VERSION: ${{ env.PREVIOUS_VERSION }}
        GRAFANA_ADMIN_PASSWORD: ${{ secrets.GRAFANA_ADMIN_PASSWORD }}
      run: |
        ansible-playbook -i ansible/inventory.ini ansible/playbook.yml \
          --user ${{ secrets.EC2_USER }} \
          --private-key <(echo "${{ secrets.SSH_PRIVATE_KEY }}") \
          -e "APP_VERSION=${{ env.VERSION }} PREVIOUS_VERSION=${{ env.PREVIOUS_VERSION }} GRAFANA_ADMIN_PASSWORD=${{ secrets.GRAFANA_ADMIN_PASSWORD }}"

    - name: Verify deployment
      run: |
        for i in {1..12}; do
          STATUS=$(ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} 'docker service ls | grep yii2-app')
          if echo "$STATUS" | grep -q "2/2"; then
            echo "Deployment successful!"
            exit 0
          fi
          echo "Waiting for deployment to complete... ($i/12)"
          sleep 10
        done
        echo "Deployment verification failed!"
        exit 1

    - name: Create deployment status
      if: success()
      uses: actions/github-script@v6
      with:
        script: |
          const deployment = await github.rest.repos.createDeployment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: process.env.VERSION,
            environment: 'production',
            auto_merge: false
          });
          
          await github.rest.repos.createDeploymentStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id: deployment.data.id,
            state: 'success'
          });

    - name: Notify on failure
      if: failure()
      run: |
        echo "Deployment failed! Check logs for details."

permissions:
  contents: read
  deployments: write